name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      deploy_password:
        description: 'Enter deployment password'
        required: true
        type: string
      full_deployment:
        description: 'Run full deployment (build images & deploy)'
        required: false
        type: boolean
        default: false
      deploy_branch:
        description: 'Enter branch name to deploy'
        required: true
        type: string
      staging_image_tag:
        description: 'Staging image tag to retag for production (e.g., stg-20240101-123456-abc1234). Leave empty to build new image.'
        required: false
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  security-password-check:
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Verify deployment password
        id: password-check
        continue-on-error: true
        run: |
          CORRECT_PASSWORD="${{ secrets.DEPLOY_PASSWORD }}"
          INPUT_PASSWORD="${{ github.event.inputs.deploy_password }}"
          
          if [[ "$INPUT_PASSWORD" != "$CORRECT_PASSWORD" ]]; then
            echo "::error::Invalid deployment password"
            exit 1
          fi
          echo "Password verified successfully"
          
      - name: Send unauthorized attempt alert
        if: steps.password-check.outcome == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,eventName,ref,workflow
          author_name: Deployment Security Alert üö®
          mention: channel
          if_mention: always
          job_name: security-check
          channel: examxv2-backend-alerts
          username: ExamX-V2-CICD
          text: |
            üö® *Unauthorized Deployment Attempt* 
            *User:* `${{ github.actor }}`
            *Workflow:* Deploy to Production
            *Status:* Failed - Invalid Password
            
            This incident has been logged for security monitoring.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Block deployment on invalid password
        if: steps.password-check.outcome == 'failure'
        run: |
          echo "::error::Authentication failed - Deployment blocked"
          exit 1

  retag-staging-image-for-production:
    needs: security-password-check
    if: github.event.inputs.staging_image_tag != '' && github.event.inputs.staging_image_tag != null
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Configure AWS credentials for ECR
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Generate production image tag
        id: generate-prod-tag
        run: |
          TIMESTAMP=$(date +'%Y%m%d-%H%M%S')
          STAGING_TAG="${{ github.event.inputs.staging_image_tag }}"
          # Extract commit ID from staging tag (assuming format: stg-...-commitid)
          COMMIT_ID=$(echo "$STAGING_TAG" | grep -oE '[a-f0-9]{7}$' || echo "unknown")
          PROD_TAG="prod-${TIMESTAMP}-${COMMIT_ID}"
          
          echo "PROD_TAG=$PROD_TAG" >> $GITHUB_OUTPUT
          echo "STAGING_TAG=$STAGING_TAG" >> $GITHUB_OUTPUT
          echo "Generated Production Tag: $PROD_TAG"

      - name: Pull, retag and push staging image to production
        run: |
          STAGING_IMAGE="${{ steps.login-ecr.outputs.registry }}/examxv2-backend:${{ steps.generate-prod-tag.outputs.STAGING_TAG }}"
          PROD_IMAGE="${{ steps.login-ecr.outputs.registry }}/examxv2-backend:${{ steps.generate-prod-tag.outputs.PROD_TAG }}"
          
          echo "Pulling staging image: $STAGING_IMAGE"
          docker pull $STAGING_IMAGE
          
          echo "Retagging to production: $PROD_IMAGE"
          docker tag $STAGING_IMAGE $PROD_IMAGE
          
          echo "Pushing production image: $PROD_IMAGE"
          docker push $PROD_IMAGE
          
          echo "Successfully retagged and pushed production image"

      - name: Save production image tag to file
        run: |
          echo "${{ steps.login-ecr.outputs.registry }}/examxv2-backend:${{ steps.generate-prod-tag.outputs.PROD_TAG }}" > backend_image_tag.txt

      - name: Upload production image tag file
        uses: actions/upload-artifact@v4
        with:
          name: backend-image-tag
          path: backend_image_tag.txt
          if-no-files-found: error

      - name: Send image retag success notification
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: Image Retag Success
          mention: ${{ github.actor }}
          if_mention: success
          job_name: retag-staging-image-for-production
          channel: examxv2-backend-alerts
          username: ExamX-V2-CICD
          text: |
            :arrows_counterclockwise: *Staging image successfully retagged for production*
            
            *Retagged by:* @${{ github.actor }}
            *Staging Tag:* `${{ steps.generate-prod-tag.outputs.STAGING_TAG }}`
            *Production Tag:* `${{ steps.generate-prod-tag.outputs.PROD_TAG }}`
            
            Image is ready for production deployment.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send image retag failure notification
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: Image Retag Failure ‚ùå
          mention: ${{ github.actor }}
          if_mention: failure
          job_name: retag-staging-image-for-production
          channel: examxv2-backend-alerts
          username: ExamX-V2-CICD
          text: |
            ‚ùå *Failed to retag staging image for production*
            
            *Attempted by:* @${{ github.actor }}
            *Staging Tag:* `${{ github.event.inputs.staging_image_tag }}`
            
            Please check the staging image exists and try again.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  build-backend-production-image:
    needs: security-password-check
    if: github.event.inputs.full_deployment == 'true'
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.deploy_branch }}
          repository: 'Greatify/ExamX-V2-Backend'
          token: ${{ secrets.REPO_DISPATCH_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: v0.12.0
          driver-opts: |
            image=moby/buildkit:v0.12.0
          buildkitd-flags: |
            --debug
            --allow-insecure-entitlement security.insecure
            --allow-insecure-entitlement network.host
          config-inline: |
            [registry."docker.io"]
              mirrors = ["mirror.gcr.io"]
            [worker.oci]
              max-parallelism = 12

      - name: Free disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo apt-get clean
          docker system prune -af
          df -h

      - name: Configure AWS credentials for ECR
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Generate production image tag
        id: generate-tag
        run: |
          TIMESTAMP=$(date +'%Y%m%d-%H%M%S')
          COMMIT_ID=$(git rev-parse HEAD)
          IMAGE_TAG="prod-${TIMESTAMP}-${COMMIT_ID}"
              
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "Generated Image Tag: $IMAGE_TAG"

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
  
      - name: Build and push Backend Docker image to ECR
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/examxv2-backend:${{ steps.generate-tag.outputs.IMAGE_TAG }}
          platforms: linux/amd64
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
  
      - name: Move cache directory
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Save image tag to file
        run: |
          echo "${{ steps.login-ecr.outputs.registry }}/examxv2-backend:${{ steps.generate-tag.outputs.IMAGE_TAG }}" > backend_image_tag.txt

      - name: Send Docker build failure notification
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,ref,workflow,eventName
          author_name: Docker Build Failure üê≥
          mention: ${{ github.actor }}
          if_mention: always
          job_name: build-backend-production-image
          channel: examxv2-backend-alerts
          username: ExamX-V2-CICD
          text: |
            ‚ùå *Docker build failed for Production deployment* üê≥
            *Pusher:* @${{ github.actor }}
            *Commit:* ${{ github.sha }}
            Please fix the Docker build issues before proceeding with deployment.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: Upload backend image tag file
        uses: actions/upload-artifact@v4
        with:
          name: backend-image-tag
          path: backend_image_tag.txt
          if-no-files-found: error

  deploy-backend-production:
    runs-on: ubuntu-latest
    needs: 
      - security-password-check
      - build-backend-production-image
      - retag-staging-image-for-production
    if: always() && (github.event.inputs.full_deployment == 'false' || needs.build-backend-production-image.result == 'success' || needs.retag-staging-image-for-production.result == 'success')
    environment: prod
    steps:
      - name: Checkout deployment repository
        uses: actions/checkout@v3
        with:
          repository: 'Greatify/ExamX-V2-Backend-Deployment'
          ref: 'main'
          fetch-depth: 0 

      - name: Download image tag files
        if: github.event.inputs.full_deployment == 'true' || github.event.inputs.staging_image_tag != ''
        uses: actions/download-artifact@v4
        with:
          name: backend-image-tag
          path: .

      - name: Set image tags as environment variables
        if: github.event.inputs.full_deployment == 'true' || github.event.inputs.staging_image_tag != ''
        run: |
          echo "BACKEND_IMAGE=$(cat backend_image_tag.txt)" >> $GITHUB_ENV
          
      - name: Update deployment image tags in production overlay
        if: github.event.inputs.full_deployment == 'true' || github.event.inputs.staging_image_tag != ''
        run: |
          # Update image tags in the production overlay kustomization file
          sed -i 's|image: "[^"]*"|image: "'"$BACKEND_IMAGE"'"|g' k8s/overlays/prod/kustomization.yaml
      
      - name: Commit and push changes
        if: github.event.inputs.full_deployment == 'true' || github.event.inputs.staging_image_tag != ''
        run: |
          git config --local user.email "hariharen@greatify.ai"
          git config --local user.name "Hariharen"
          git add k8s/overlays/prod/kustomization.yaml
          if [ "${{ github.event.inputs.staging_image_tag }}" != "" ]; then
            git commit -m "Update image tags for production deployment - Retagged from staging: ${{ github.event.inputs.staging_image_tag }}"
          else
            git commit -m "Update image tags for production deployment"
          fi
          git push origin main
      
      # - name: Push to protected branch
      #   if: github.event.inputs.full_deployment == 'true'
      #   uses: CasperWA/push-protected@v2
      #   with:
      #     token: ${{ secrets.PAT_TOKEN }}
      #     branch: ${{ github.ref_name }}
      #     unprotect_reviews: true

      - name: Configure AWS credentials for deployment
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update Kubernetes configuration
        run: aws eks update-kubeconfig --name greatify-production-cluster --region ap-south-1

      - name: Deploy to production environment
        run: |
          kubectl apply -k k8s/overlays/prod --validate=true

      - name: Send deployment failure notification
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          author_name: Production Deployment Failure ‚ùå
          mention: ${{ github.actor }}
          if_mention: failure
          job_name: deploy-backend-production
          channel: examxv2-backend-alerts
          username: ExamX-V2-CICD
          text: |
            ‚ùå *Production Deployment Failed*
            
            *Deployment by:* @${{ github.actor }}
            *Commit:* ${{ github.sha }}
            *Branch:* ${{ github.ref_name }}
            
            @${{ github.actor }}, the production deployment has failed.
            Please check the logs and fix the issues immediately.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

name: Deploy Feature Environment

on:
  workflow_dispatch:
    inputs:
      image:
        description: 'Docker image to deploy'
        required: true
      branch_name:
        description: 'Original branch name'
        required: true
      clean_branch_name:
        description: 'Cleaned branch name for environment'
        required: true
      sha:
        description: 'Git SHA of the commit'
        required: true
      commit_message:
        description: 'Original commit message'
        required: true
      requester:
        description: 'User who requested the deployment'
        required: true
      has_custom_env:
        description: 'Whether custom .env content is provided'
        required: false
        default: 'false'
      custom_env_content:
        description: 'Base64 encoded custom .env content'
        required: false
        default: ''
  
jobs:
  deploy-feature-environment:
    runs-on: ubuntu-latest
    environment: dev  # Using dev environment for AWS credentials
    steps:
      - name: Display Deployment Information
        run: |
          echo "Image: ${{ github.event.inputs.image }}"
          echo "Branch: ${{ github.event.inputs.branch_name }}"
          echo "Clean Branch: ${{ github.event.inputs.clean_branch_name }}"
          echo "SHA: ${{ github.event.inputs.sha }}"
          echo "Commit Message: ${{ github.event.inputs.commit_message }}"
          echo "Requester: ${{ github.event.inputs.requester }}"
          echo "Has Custom Env: ${{ github.event.inputs.has_custom_env }}"

      - name: Checkout repository code
        uses: actions/checkout@v4
  
      - name: Set environment variables
        run: |
          echo "FEAT_ENV_NAME=feat-${{ github.event.inputs.clean_branch_name }}" >> $GITHUB_ENV
          echo "FEAT_NAMESPACE=feat-${{ github.event.inputs.clean_branch_name }}-examxv2" >> $GITHUB_ENV
          echo "BACKEND_IMAGE=${{ github.event.inputs.image }}" >> $GITHUB_ENV
          
          # Generate unique subdomain
          SUBDOMAIN="${{ github.event.inputs.clean_branch_name }}"
          echo "SUBDOMAIN=$SUBDOMAIN" >> $GITHUB_ENV
          
      - name: Create feature overlay directory
        run: |
          mkdir -p k8s/overlays/${{ env.FEAT_ENV_NAME }}

      - name: Generate feature environment kustomization
        run: |
          cat > k8s/overlays/${{ env.FEAT_ENV_NAME }}/kustomization.yaml << EOF
          apiVersion: kustomize.config.k8s.io/v1beta1
          kind: Kustomization
          namespace: ${{ env.FEAT_NAMESPACE }}
          
          resources:
            # Include base resources except secrets
            - ../../base/deployment/backend-deployment.yaml
            - ../../base/deployment/celery-worker-default-deployment.yaml
            - ../../base/deployment/celery-beat-deployment.yaml
            - ../../base/deployment/celery-bulk-upload-worker-deployment.yaml
            - ../../base/deployment/celery-enrichment-worker-deployment.yaml
            - ../../base/deployment/celery-flower-deployment.yaml
            - ../../base/services/examxv2-backend-service.yaml
            - ../../base/ingress/ingress.yaml
            - ../../base/configmap/nginx-config.yaml
            - ../../base/autoscaling/backend-autoscaler.yaml
            - ../../base/autoscaling/celery-worker-default-autoscaler.yaml
            - ../../base/autoscaling/celery-beat-autoscaler.yaml
            - namespace.yaml
          
          labels:
            - pairs:
                environment: feature
                tier: feat
                branch: ${{ github.event.inputs.clean_branch_name }}
                requester: ${{ github.event.inputs.requester }}
              includeSelectors: false
          
          patches:
            # Ultra-simple Backend Deployment - only nginx volumes
            - patch: |-
                apiVersion: apps/v1
                kind: Deployment
                metadata:
                  name: examxv2-backend
                spec:
                  replicas: 1
                  template:
                    spec:
                      volumes:
                        - name: nginx-config
                          configMap:
                            name: nginx-config
                        - name: nginx-cache
                          emptyDir: {}
                        - name: config-volume
                          configMap:
                            name: nginx-config
                            items:
                              - key: nginx.conf
                                path: nginx.conf
                      containers:
                      - name: examxv2-backend
                        image: ${{ env.BACKEND_IMAGE }}
                        resources:
                          requests:
                            cpu: "0.5"
                            memory: "2Gi"
                          limits:
                            cpu: "1"
                            memory: "4Gi"
                        env:
                        - name: WORKERS
                          value: "1"
                        - name: DJANGO_DEBUG
                          value: "True"
                        - name: FEATURE_ENV
                          value: "true"
                        - name: BRANCH_NAME
                          value: "${{ github.event.inputs.branch_name }}"
                        volumeMounts:
                          - name: config-volume
                            mountPath: /etc/nginx/nginx.conf
                            subPath: nginx.conf
                          - name: nginx-config
                            mountPath: /etc/nginx/conf.d/default.conf
                            subPath: default.conf
                          - name: nginx-cache
                            mountPath: /var/cache/nginx
              target:
                kind: Deployment
                name: examxv2-backend
          
            # Ultra-simple Celery Worker - only nginx volumes
            - patch: |-
                apiVersion: apps/v1
                kind: Deployment
                metadata:
                  name: celery-worker-default
                spec:
                  replicas: 1
                  template:
                    spec:
                      volumes:
                        - name: nginx-config
                          configMap:
                            name: nginx-config
                        - name: nginx-cache
                          emptyDir: {}
                        - name: config-volume
                          configMap:
                            name: nginx-config
                            items:
                              - key: nginx.conf
                                path: nginx.conf
                      containers:
                      - name: celery-worker-default
                        image: ${{ env.BACKEND_IMAGE }}
                        resources:
                          requests:
                            cpu: "0.25"
                            memory: "1Gi"
                          limits:
                            cpu: "0.5"
                            memory: "2Gi"
                        volumeMounts:
                          - name: config-volume
                            mountPath: /etc/nginx/nginx.conf
                            subPath: nginx.conf
                          - name: nginx-config
                            mountPath: /etc/nginx/conf.d/default.conf
                            subPath: default.conf
                          - name: nginx-cache
                            mountPath: /var/cache/nginx
              target:
                kind: Deployment
                name: celery-worker-default
          
            # Ultra-simple Celery Beat - only nginx volumes
            - patch: |-
                apiVersion: apps/v1
                kind: Deployment
                metadata:
                  name: celery-beat
                spec:
                  replicas: 1
                  template:
                    spec:
                      volumes:
                        - name: nginx-config
                          configMap:
                            name: nginx-config
                        - name: nginx-cache
                          emptyDir: {}
                        - name: config-volume
                          configMap:
                            name: nginx-config
                            items:
                              - key: nginx.conf
                                path: nginx.conf
                      containers:
                      - name: celery-beat
                        image: ${{ env.BACKEND_IMAGE }}
                        resources:
                          requests:
                            cpu: "0.1"
                            memory: "512Mi"
                          limits:
                            cpu: "0.25"
                            memory: "1Gi"
                        volumeMounts:
                          - name: config-volume
                            mountPath: /etc/nginx/nginx.conf
                            subPath: nginx.conf
                          - name: nginx-config
                            mountPath: /etc/nginx/conf.d/default.conf
                            subPath: default.conf
                          - name: nginx-cache
                            mountPath: /var/cache/nginx
              target:
                kind: Deployment
                name: celery-beat
          
            # Ingress patches with unique subdomain
            - patch: |-
                apiVersion: networking.k8s.io/v1
                kind: Ingress
                metadata:
                  name: examxv2-ingress
                  annotations:
                    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:ap-south-1:399600302704:certificate/f191c431-422f-42a6-85ec-13eabec5272f
                    alb.ingress.kubernetes.io/cors-allow-origin: >-
                      https://${{ env.SUBDOMAIN }}.examx.cloud,https://examx.cloud,https://www.examx.cloud
                    alb.ingress.kubernetes.io/tags: Environment=feature,Branch=${{ github.event.inputs.clean_branch_name }}
                spec:
                  rules:
                    - host: ${{ env.SUBDOMAIN }}.examx.cloud
                      http:
                        paths:
                          - path: /
                            pathType: Prefix
                            backend:
                              service:
                                name: examxv2-backend-service
                                port:
                                  number: 80
                  tls:
                    - hosts:
                        - ${{ env.SUBDOMAIN }}.examx.cloud
                      secretName: tls-secret
              target:
                kind: Ingress
                name: examxv2-ingress
          EOF

      - name: Create namespace manifest
        run: |
          mkdir -p k8s/overlays/${{ env.FEAT_ENV_NAME }}
          cat > k8s/overlays/${{ env.FEAT_ENV_NAME }}/namespace.yaml << EOF
          apiVersion: v1
          kind: Namespace
          metadata:
            name: ${{ env.FEAT_NAMESPACE }}
            labels:
              environment: feature
              tier: feat
              branch: ${{ github.event.inputs.clean_branch_name }}
              requester: ${{ github.event.inputs.requester }}
            annotations:
              examx.cloud/created-by: ${{ github.event.inputs.requester }}
              examx.cloud/branch: ${{ github.event.inputs.branch_name }}
              examx.cloud/commit: ${{ github.event.inputs.sha }}
          EOF

      - name: Configure AWS credentials for deployment
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update Kubernetes configuration
        run: aws eks update-kubeconfig --name dev-stg-cluster --region ap-south-1

      - name: Deploy to feature environment
        run: |
          kubectl apply -k k8s/overlays/${{ env.FEAT_ENV_NAME }}
          
          # Wait for deployment to be ready
          kubectl wait --for=condition=available --timeout=300s deployment/examxv2-backend -n ${{ env.FEAT_NAMESPACE }}
          
          # Get pod status
          kubectl get pods -n ${{ env.FEAT_NAMESPACE }}

      - name: Send deployment success notification
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,ref,workflow,eventName
          author_name: Feature Environment Deployed 🚀
          mention: ${{ github.event.inputs.requester }}
          if_mention: success
          job_name: deploy-feature-environment
          channel: examxv2-backend-alerts
          username: ExamX-V2-CICD
          text: |
            🚀 *Feature environment deployed successfully*
            
            *Branch:* `${{ github.event.inputs.branch_name }}`
            *Environment:* `${{ env.FEAT_ENV_NAME }}`
            *Deployed by:* @${{ github.event.inputs.requester }}
            *Commit:* `${{ github.event.inputs.sha }}`
            *Commit message:* ${{ github.event.inputs.commit_message }}
            
            🌐 *Access URL:* https://${{ env.SUBDOMAIN }}.examx.cloud
            
            @${{ github.event.inputs.requester }}, your feature environment is ready for testing!
            
            💡 *Cleanup:* Run cleanup workflows when you're done testing
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send deployment failure notification
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,ref,workflow,eventName
          author_name: Feature Environment Deployment Failed ❌
          mention: ${{ github.event.inputs.requester }}
          if_mention: failure
          job_name: deploy-feature-environment
          channel: examxv2-backend-alerts
          username: ExamX-V2-CICD
          text: |
            ❌ *Feature environment deployment failed*
            
            *Branch:* `${{ github.event.inputs.branch_name }}`
            *Environment:* `${{ env.FEAT_ENV_NAME }}`
            *Requested by:* @${{ github.event.inputs.requester }}
            *Commit:* `${{ github.event.inputs.sha }}`
            
            Please check the workflow logs and try again.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: Clean up temporary files
        if: always()
        run: |
          rm -rf k8s/overlays/${{ env.FEAT_ENV_NAME }} 

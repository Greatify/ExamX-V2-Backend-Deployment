name: Deploy to Development
 
on:
  workflow_dispatch:
    inputs:
      deploy_branch:
        description: 'Branch to deploy from source repo'
        required: true
        type: string
        default: 'dev'
      commit_sha:
        description: 'Git SHA of the commit'
        required: true
        type: string
      commit_message:
        description: 'Original commit message'
        required: true
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:   
  build-backend-dev-image:
    runs-on: ubuntu-24.04-arm
    environment: dev
    steps:
      - name: Display Build Information
        run: |
          echo "Branch: ${{ github.event.inputs.deploy_branch }}"
          echo "Commit SHA: ${{ github.event.inputs.commit_sha }}"
          echo "Commit Message: ${{ github.event.inputs.commit_message }}"

      - name: Checkout source repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.deploy_branch }}
          repository: 'Greatify/ExamX-V2-Backend'
          token: ${{ secrets.REPO_DISPATCH_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: v0.12.0
          driver-opts: |
            image=moby/buildkit:v0.12.0
          buildkitd-flags: |
            --debug
            --allow-insecure-entitlement security.insecure
            --allow-insecure-entitlement network.host
          config-inline: |
            [registry."docker.io"]
              mirrors = ["mirror.gcr.io"]
            [worker.oci]
              max-parallelism = 4

      - name: Free disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo apt-get clean
          docker system prune -af
          df -h

      - name: Configure AWS credentials for ECR
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Generate dev image tag
        id: generate-tag
        run: |
          COMMIT_ID="${{ github.event.inputs.commit_sha }}"
          COMMIT_MSG="${{ github.event.inputs.commit_message }}"
          
          # Remove newlines, tabs, and limit length
          CLEAN_MSG=$(echo "$COMMIT_MSG" | tr -d '\n\r\t' | head -c 60 | tr -s ' ' | xargs || echo "no-message")
          # Sanitize to safe characters only
          SAFE_MSG=$(echo "$CLEAN_MSG" | sed -e 's/[^a-zA-Z0-9 _-]//g' -e 's/[[:space:]]/-/g' -e 's/--*/-/g' -e 's/^-\+\|-\+$//g' | cut -c1-35 | sed 's/-$//' || echo "fallback")
          # Ensure we have a valid tag
          FINAL_MSG=$(echo "$SAFE_MSG" | grep -E '^[a-zA-Z0-9][a-zA-Z0-9_-]*$' || echo "commit-$(date +%s)")
          IMAGE_TAG="dev-${FINAL_MSG}-${COMMIT_ID}"
          
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "Generated Image Tag: $IMAGE_TAG"

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-dev-${{ github.event.inputs.commit_sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-dev-
            ${{ runner.os }}-buildx-

      - name: Build and push backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/examxv2-backend:${{ steps.generate-tag.outputs.IMAGE_TAG }}
          platforms: linux/arm64
          build-args: |
            USE_BADPROXY=${{ vars.USE_BADPROXY }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          no-cache: false
          pull: true

      - name: Move cache directory
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Save image tag to file
        run: |
          echo "${{ steps.login-ecr.outputs.registry }}/examxv2-backend:${{ steps.generate-tag.outputs.IMAGE_TAG }}" > backend_image_tag.txt

      - name: Upload backend image tag file
        uses: actions/upload-artifact@v4
        with:
          name: backend-image-tag
          path: backend_image_tag.txt
          if-no-files-found: error

      - name: Send Docker build failure notification
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: Docker Build Failure üê≥
          mention: channel
          if_mention: always
          job_name: build-backend-dev-image
          channel: examxv2-backend-alerts
          username: ExamX-V2-CICD
          text: |
            ‚ùå *Docker build failed for dev deployment* üê≥
            *Commit:* `${{ github.event.inputs.commit_sha }}`
            *Message:* ${{ github.event.inputs.commit_message }}
            Please fix the Docker build issues.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-backend-dev:
    runs-on: ubuntu-24.04-arm
    needs: [build-backend-dev-image]
    environment: dev
    steps:
      - name: Checkout deployment repository
        uses: actions/checkout@v4
        with:
          repository: 'Greatify/ExamX-V2-Backend-Deployment'
          ref: 'main'
          fetch-depth: 0

      - name: Download image tag files
        uses: actions/download-artifact@v4
        with:
          name: backend-image-tag
          path: .

      - name: Set image tags as environment variables
        run: |
          echo "BACKEND_IMAGE=$(cat backend_image_tag.txt)" >> $GITHUB_ENV

      - name: Update deployment image tag in Kustomization
        run: |
          # Update image tags in the dev overlay kustomization file
          sed -i 's|image: "[^"]*"|image: "'"$BACKEND_IMAGE"'"|g' k8s/overlays/dev/kustomization.yaml
          sed -i 's|kubernetes.io/change-cause:.*|kubernetes.io/change-cause: Updated to "'"$BACKEND_IMAGE"'"|g' k8s/overlays/dev/kustomization.yaml

      - name: Commit and push changes
        run: |
          git config --local user.email "hariharen@greatify.ai"
          git config --local user.name "Hariharen"
          git add k8s/overlays/dev/kustomization.yaml
          
          # Check if there are any changes to commit
          if git diff --cached --quiet; then
            echo "No changes to commit, skipping commit and push"
          else
            echo "Changes detected, committing and pushing"
            git commit -m "Update image tags for dev deployment - ${{ github.event.inputs.commit_message }}"
            git push origin main
          fi

      - name: Configure AWS credentials for deployment
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update Kubernetes configuration
        run: aws eks update-kubeconfig --name ${{ secrets.DEV_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

      - name: Deploy to development environment
        run: |
          kubectl apply -k k8s/overlays/dev

      - name: Send deployment success notification
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: Backend Deployment Success
          mention: channel
          if_mention: success
          job_name: deploy-backend-dev
          channel: examxv2-backend-alerts
          username: ExamX-V2-CICD
          text: |
            :rocket: *Backend deployment to dev environment succeeded*
            
            *Commit:* `${{ github.event.inputs.commit_sha }}`
            *Message:* ${{ github.event.inputs.commit_message }}
            
            Your changes have been deployed successfully to Development.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send deployment failure notification
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: Deployment Failure ‚ùå
          mention: channel
          if_mention: failure
          job_name: deploy-backend-dev
          channel: examxv2-backend-alerts
          username: ExamX-V2-CICD
          text: |
            ‚ùå *Dev Deployment Failed*
            
            *Commit:* `${{ github.event.inputs.commit_sha }}`
            *Message:* ${{ github.event.inputs.commit_message }}
            
            Please check the logs and fix the issues immediately.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

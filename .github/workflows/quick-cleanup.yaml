name: ‚ö° Quick Cleanup My Environments

on:
  workflow_dispatch:
    inputs:
      confirmation:
        description: '‚ö†Ô∏è This will cleanup ALL your feature environments. Type "CLEANUP_ALL" to confirm'
        required: true
        type: string

jobs:
  quick-cleanup-my-envs:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Validate confirmation
        run: |
          if [ "${{ github.event.inputs.confirmation }}" != "CLEANUP_ALL" ]; then
            echo "::error::Please type 'CLEANUP_ALL' to confirm cleanup of all your environments"
            exit 1
          fi
          echo "‚úÖ Confirmation validated"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update Kubernetes configuration
        run: aws eks update-kubeconfig --name dev-stg-cluster --region ap-south-1

      - name: Find and cleanup my environments
        id: cleanup-envs
        run: |
          echo "üîç Finding feature environments created by ${{ github.actor }}..."
          
          # Find all feature namespaces created by this user
          MY_NAMESPACES=$(kubectl get namespaces -l environment=feature -o json | jq -r '.items[] | select(.metadata.annotations."examx.cloud/created-by" == "${{ github.actor }}") | .metadata.name' 2>/dev/null || echo "")
          
          if [ -z "$MY_NAMESPACES" ]; then
            echo "environments_found=false" >> $GITHUB_OUTPUT
            echo "üì≠ No feature environments found created by ${{ github.actor }}"
            exit 0
          fi
          
          echo "environments_found=true" >> $GITHUB_OUTPUT
          
          CLEANUP_REPORT="üßπ *Cleaning up environments for @${{ github.actor }}*\n\n"
          CLEANUP_COUNT=0
          
          for namespace in $MY_NAMESPACES; do
            echo "üßπ Processing namespace: $namespace"
            
            # Get environment details
            BRANCH=$(kubectl get namespace $namespace -o jsonpath='{.metadata.annotations.examx\.cloud/branch}' 2>/dev/null || echo "unknown")
            ENV_TYPE=$(kubectl get namespace $namespace -o jsonpath='{.metadata.annotations.examx\.cloud/env-type}' 2>/dev/null || echo "unknown")
            COMMIT=$(kubectl get namespace $namespace -o jsonpath='{.metadata.annotations.examx\.cloud/commit}' 2>/dev/null | cut -c1-7 || echo "unknown")
            
            # Get environment name from namespace
            ENV_NAME=$(echo $namespace | sed 's/-examxv2$//')
            
            echo "   ‚Ä¢ Environment: $ENV_NAME"
            echo "   ‚Ä¢ Branch: $BRANCH"
            echo "   ‚Ä¢ Commit: $COMMIT"
            echo "   ‚Ä¢ Type: $ENV_TYPE"
            
            # Delete namespace
            echo "   üóëÔ∏è  Deleting namespace..."
            kubectl delete namespace $namespace --ignore-not-found=true
            
            # Add to report
            ENV_TYPE_ICON=$( [ "$ENV_TYPE" = "custom" ] && echo "üîß" || echo "üèóÔ∏è" )
            CLEANUP_REPORT="${CLEANUP_REPORT}‚úÖ \`$ENV_NAME\` - Branch: \`$BRANCH\` - Commit: \`$COMMIT\` - $ENV_TYPE_ICON $ENV_TYPE\n"
            
            CLEANUP_COUNT=$((CLEANUP_COUNT + 1))
            echo ""
          done
          
          echo "cleanup_count=$CLEANUP_COUNT" >> $GITHUB_OUTPUT
          
          # Save report
          CLEANUP_REPORT="${CLEANUP_REPORT}\nüéâ *Total environments cleaned: $CLEANUP_COUNT*"
          echo "cleanup_report<<EOF" >> $GITHUB_OUTPUT
          echo -e "$CLEANUP_REPORT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Cleanup completed! Cleaned up $CLEANUP_COUNT environments."

      - name: Send cleanup success notification
        if: success() && steps.cleanup-envs.outputs.environments_found == 'true'
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,ref,workflow,eventName
          author_name: Quick Cleanup Completed ‚ö°
          mention: ${{ github.actor }}
          if_mention: success
          job_name: quick-cleanup-my-envs
          channel: examxv2-backend-alerts
          username: ExamX-V2-CICD
          text: |
            ${{ steps.cleanup-envs.outputs.cleanup_report }}
            
            All your feature environments have been cleaned up successfully!
            
            üí° *Next steps:*
            ‚Ä¢ Create new environments as needed with "ExamX-V2 Backend CI - Feature Branch"
            ‚Ä¢ Check the Kubernetes cluster to see remaining active environments

      - name: Send no environments message
        if: steps.cleanup-envs.outputs.environments_found == 'false'
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,ref,workflow,eventName
          author_name: No Environments to Cleanup ‚ú®
          mention: ${{ github.actor }}
          if_mention: always
          job_name: quick-cleanup-my-envs
          channel: examxv2-backend-alerts
          username: ExamX-V2-CICD
          text: |
            ‚ú® *No cleanup needed for @${{ github.actor }}*
            
            You don't have any active feature environments to clean up.
            
            üí° *Create a new environment:*
            Run "ExamX-V2 Backend CI - Feature Branch" workflow to deploy a feature environment.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send cleanup failure notification
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,ref,workflow,eventName
          author_name: Quick Cleanup Failed ‚ùå
          mention: ${{ github.actor }}
          if_mention: failure
          job_name: quick-cleanup-my-envs
          channel: examxv2-backend-alerts
          username: ExamX-V2-CICD
          text: |
            ‚ùå *Quick cleanup failed for @${{ github.actor }}*
            
            There was an issue cleaning up your feature environments.
            
            üí° *Alternative options:*
            ‚Ä¢ Try "üßπ Cleanup Feature Environment" for individual cleanup
            ‚Ä¢ Check the Kubernetes cluster for available environments
            ‚Ä¢ Contact DevOps team for assistance
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 
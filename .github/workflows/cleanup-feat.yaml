name: üßπ Cleanup Feature Environment

on:
  workflow_dispatch:
    inputs:
      environment_name:
        description: 'üè∑Ô∏è Feature environment name (e.g., feat-my-feature) - Run "List Feature Environments" to see active environments'
        required: true
        type: string
      cleanup_type:
        description: 'üöÄ Cleanup type'
        required: true
        type: choice
        options:
          - 'Quick Cleanup - Just DELETE'
          - 'Safe Cleanup - Type full confirmation'
        default: 'Quick Cleanup - Just DELETE'
      confirmation:
        description: '‚úÖ Type "DELETE" for quick cleanup OR type the full environment name for safe cleanup'
        required: true
        type: string

jobs:
  cleanup-feature-environment:
    runs-on: ubuntu-latest
    environment: dev  # Using dev environment for AWS credentials
    steps:
      - name: Validate confirmation based on cleanup type
        run: |
          CLEANUP_TYPE="${{ github.event.inputs.cleanup_type }}"
          CONFIRMATION="${{ github.event.inputs.confirmation }}"
          ENV_NAME="${{ github.event.inputs.environment_name }}"
          
          if [[ "$CLEANUP_TYPE" == *"Quick Cleanup"* ]]; then
            if [ "$CONFIRMATION" != "DELETE" ]; then
              echo "::error::For quick cleanup, please type 'DELETE' in the confirmation field."
              exit 1
            fi
            echo "‚úÖ Quick cleanup confirmed"
          else
            if [ "$CONFIRMATION" != "$ENV_NAME" ]; then
              echo "::error::For safe cleanup, please type the full environment name '$ENV_NAME' in the confirmation field."
              exit 1
            fi
            echo "‚úÖ Safe cleanup confirmed"
          fi

      - name: Validate environment name
        run: |
          ENV_NAME="${{ github.event.inputs.environment_name }}"
          if [[ ! "$ENV_NAME" =~ ^feat- ]]; then
            echo "::error::Environment name must start with 'feat-'"
            echo "::error::Example: feat-my-feature-branch"
            echo "::error::Check the Kubernetes cluster for available environments"
            exit 1
          fi
          echo "FEAT_ENV_NAME=$ENV_NAME" >> $GITHUB_ENV
          echo "FEAT_NAMESPACE=${ENV_NAME}-examxv2" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update Kubernetes configuration
        run: aws eks update-kubeconfig --name dev-stg-cluster --region ap-south-1

      - name: Check if environment exists and get details
        id: check-env
        run: |
          if kubectl get namespace ${{ env.FEAT_NAMESPACE }} 2>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Environment ${{ env.FEAT_NAMESPACE }} exists"
            
            # Get environment metadata
            CREATED_BY=$(kubectl get namespace ${{ env.FEAT_NAMESPACE }} -o jsonpath='{.metadata.annotations.examx\.cloud/created-by}' 2>/dev/null || echo "unknown")
            BRANCH=$(kubectl get namespace ${{ env.FEAT_NAMESPACE }} -o jsonpath='{.metadata.annotations.examx\.cloud/branch}' 2>/dev/null || echo "unknown")
            COMMIT=$(kubectl get namespace ${{ env.FEAT_NAMESPACE }} -o jsonpath='{.metadata.annotations.examx\.cloud/commit}' 2>/dev/null | cut -c1-7 || echo "unknown")
            ENV_TYPE=$(kubectl get namespace ${{ env.FEAT_NAMESPACE }} -o jsonpath='{.metadata.annotations.examx\.cloud/env-type}' 2>/dev/null || echo "unknown")
            
            echo "created_by=$CREATED_BY" >> $GITHUB_OUTPUT
            echo "branch=$BRANCH" >> $GITHUB_OUTPUT
            echo "commit=$COMMIT" >> $GITHUB_OUTPUT
            echo "env_type=$ENV_TYPE" >> $GITHUB_OUTPUT
            
            # Get resource usage
            POD_COUNT=$(kubectl get pods -n ${{ env.FEAT_NAMESPACE }} --no-headers 2>/dev/null | wc -l || echo "0")
            echo "pod_count=$POD_COUNT" >> $GITHUB_OUTPUT
            
            echo ""
            echo "üìã Environment Details:"
            echo "   ‚Ä¢ Created by: $CREATED_BY"
            echo "   ‚Ä¢ Branch: $BRANCH"
            echo "   ‚Ä¢ Commit: $COMMIT"
            echo "   ‚Ä¢ Environment Type: $ENV_TYPE"
            echo "   ‚Ä¢ Pods: $POD_COUNT"
            
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "‚ùå Environment ${{ env.FEAT_NAMESPACE }} does not exist"
          fi

      - name: Cleanup feature environment
        if: steps.check-env.outputs.exists == 'true'
        run: |
          echo "üßπ Starting cleanup of feature environment: ${{ env.FEAT_NAMESPACE }}"
          echo "   ‚Ä¢ Environment: ${{ env.FEAT_ENV_NAME }}"
          echo "   ‚Ä¢ Original creator: ${{ steps.check-env.outputs.created_by }}"
          echo "   ‚Ä¢ Cleanup requested by: ${{ github.actor }}"
          echo ""
          
          # Delete the namespace (this will delete all resources in it)
          echo "üóëÔ∏è  Deleting namespace and all resources..."
          kubectl delete namespace ${{ env.FEAT_NAMESPACE }} --ignore-not-found=true
          
          # Wait for namespace deletion
          echo "‚è≥ Waiting for namespace deletion..."
          timeout=300
          while kubectl get namespace ${{ env.FEAT_NAMESPACE }} 2>/dev/null && [ $timeout -gt 0 ]; do
            echo "   Waiting for namespace deletion... ($timeout seconds remaining)"
            sleep 10
            timeout=$((timeout - 10))
          done
          
          if kubectl get namespace ${{ env.FEAT_NAMESPACE }} 2>/dev/null; then
            echo "::warning::Namespace deletion is taking longer than expected. It may still be in terminating state."
            echo "This is normal for namespaces with many resources. The cleanup will complete in the background."
          else
            echo "‚úÖ Namespace successfully deleted"
          fi
          
          echo ""
          echo "üéâ Cleanup completed successfully!"

      - name: Send cleanup success notification
        if: success() && steps.check-env.outputs.exists == 'true'
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,ref,workflow,eventName
          author_name: Feature Environment Cleaned Up üßπ
          mention: ${{ github.actor }}
          if_mention: success
          job_name: cleanup-feature-environment
          channel: examxv2-backend-alerts
          username: ExamX-V2-CICD
          text: |
            üßπ *Feature environment cleaned up successfully*
            
            *Environment:* `${{ env.FEAT_ENV_NAME }}`
            *Original Branch:* `${{ steps.check-env.outputs.branch }}`
            *Original Commit:* `${{ steps.check-env.outputs.commit }}`
            *Environment Type:* ${{ steps.check-env.outputs.env_type == 'custom' && 'üîß Custom .env' || 'üèóÔ∏è Default secrets' }}
            *Originally Created by:* ${{ steps.check-env.outputs.created_by }}
            *Cleaned up by:* @${{ github.actor }}
            
            The feature environment has been manually terminated.
            
            üí° *Tip:* Check the Kubernetes cluster to see remaining active environments.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send environment not found notification
        if: steps.check-env.outputs.exists == 'false'
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,ref,workflow,eventName
          author_name: Feature Environment Not Found ‚ö†Ô∏è
          mention: ${{ github.actor }}
          if_mention: always
          job_name: cleanup-feature-environment
          channel: examxv2-backend-alerts
          username: ExamX-V2-CICD
          text: |
            ‚ö†Ô∏è *Feature environment not found*
            
            *Environment:* `${{ env.FEAT_ENV_NAME }}`
            *Requested by:* @${{ github.actor }}
            
            The specified feature environment does not exist or has already been cleaned up.
            
            üí° *Tip:* Check the Kubernetes cluster for available environments.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send cleanup failure notification
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,ref,workflow,eventName
          author_name: Feature Environment Cleanup Failed ‚ùå
          mention: ${{ github.actor }}
          if_mention: failure
          job_name: cleanup-feature-environment
          channel: examxv2-backend-alerts
          username: ExamX-V2-CICD
          text: |
            ‚ùå *Feature environment cleanup failed*
            
            *Environment:* `${{ env.FEAT_ENV_NAME }}`
            *Requested by:* @${{ github.actor }}
            
            Please check the workflow logs and try again, or contact the DevOps team.
            
            üí° *Common solutions:*
            ‚Ä¢ Verify the environment name is correct
            ‚Ä¢ Check if you have the necessary permissions
            ‚Ä¢ Check the Kubernetes cluster for available environments
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 